name: Main Branch Workflow

on:
  push:
    branches: [main]

jobs:
  build-and-push-docker:
    runs-on: ubuntu-latest
    permissions:
      packages: write
      id-token: write
      attestations: write
    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.repository }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract version from file
        run: |
          VERSION=$(cat ./VERSION)
          echo "VERSION=${VERSION}" >> $GITHUB_ENV

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true

  deploy-to-ecs:
    name: Deploy to ECS
    runs-on: ubuntu-latest
    needs: build-and-push-docker
    permissions:
      id-token: write
      contents: read
    env:
      AWS_REGION: eu-central-1
      CLUSTER_NAME: unlimited-excellence-cluster
      SERVICE_NAME: horse-project-service
      TASK_DEF_NAME: horse-project-task
      CONTAINER_NAME: horse-project
      IMAGE_URI: ghcr.io/unlimited-excellence/horse-dao:main

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHubActionsDeployRole
          aws-region: ${{ env.AWS_REGION }}

      - name: Validate image exists in GHCR
        run: |
          echo "🔍 Checking if image $IMAGE_URI exists..."
          STATUS=$(curl -s -o /dev/null -w "%{http_code}" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            https://ghcr.io/v2/unlimited-excellence/horse-dao/manifests/main)

          if [ "$STATUS" -ne 200 ]; then
            echo "❌ Image not found in GHCR (HTTP $STATUS) — aborting deploy."
            exit 1
          fi

          echo "✅ Image exists in GHCR."

      - name: Download current ECS task definition
        run: |
          aws ecs describe-task-definition \
            --task-definition ${{ env.TASK_DEF_NAME }} \
            --query taskDefinition > task-definition.json

      - name: Update container image in task definition
        run: |
          cat task-definition.json | \
            jq '.containerDefinitions[0].image = "${{ env.IMAGE_URI }}"' \
            > new-task-def.json

      - name: Register new task definition revision
        id: register-task-def
        run: |
          TASK_DEF_ARN=$(aws ecs register-task-definition \
            --cli-input-json file://new-task-def.json \
            --query 'taskDefinition.taskDefinitionArn' \
            --output text)
          echo "TASK_DEF_ARN=$TASK_DEF_ARN" >> $GITHUB_ENV

      - name: Update ECS service with new task definition
        run: |
          aws ecs update-service \
            --cluster ${{ env.CLUSTER_NAME }} \
            --service ${{ env.SERVICE_NAME }} \
            --task-definition ${{ env.TASK_DEF_ARN }}

  create-release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Extract version from Gradle
        id: get-version
        run: |
          VERSION=$(cat ./VERSION)
          echo "VERSION=${VERSION}" >> $GITHUB_ENV

      - name: Release
        uses: softprops/action-gh-release@v2
        if: true
        with:
          tag_name: ${{ env.VERSION }}
          body_path: ./CHANGELOG.md
          files: |
            *

  generate-git-badges:
    name: Generate Git Badges
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Output git info
        id: git_info
        run: |
          function format_size { echo $(numfmt --to iec --suffix B $1); }
          function format_number { LC_ALL=en_US.UTF-8 printf "%'d\n" $1; }
          echo "file_count=$(format_number $(git ls-files | wc -l))" >> $GITHUB_OUTPUT
          echo "lines_of_code=$(find . -type f -name "*.py" -exec wc -l {} + | awk '{s+=$1} END {print s}')" >> $GITHUB_OUTPUT
          git gc
          echo "size=$(format_size $(($(git count-objects -v | grep 'size-pack: ' | sed 's/size-pack: //g' | tr -d '\n') * 1024)))" >> $GITHUB_OUTPUT
        shell: bash

      - name: Generate-Badge
        uses: likespro/generate-badge@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          filename: |
            (
              "git-size"
              "git-file-count"
              "git-lines-of-code"
            )
          label: ("size" "files" "lines-of-code")
          message: |
            (
              "${{ steps.git_info.outputs.size }}"
              "${{ steps.git_info.outputs.file_count }}"
              "${{ steps.git_info.outputs.lines_of_code }}"
            )
          namedLogo: ("git" "git" "git")
          color: ("f1502f" "f1502f" "f1502f")